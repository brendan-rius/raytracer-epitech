using OpenTK;

namespace raytracer.core
{
    /// <summary>
    ///     A ray is generated by the camera from a sample.
    ///     It is then launched in the scene, from where it gets a spectrum
    ///     <seealso cref="Camera" />
    ///     <seealso cref="Sample" />
    ///     <seealso cref="Scene" />
    ///     <seealso cref="Spectrum" />
    /// </summary>
    public struct Ray
    {
        /// <summary>
        ///     The direction of the vector.
        ///     This direction is not normalized.
        /// </summary>
        public Vector3 Direction;

        /// <summary>
        ///     The origin point of a ray
        /// </summary>
        public Vector3 Origin;

        /// <summary>
        ///     Create a ray from a direction and an origin
        /// </summary>
        /// <param name="direction">the direction of the ray</param>
        /// <param name="origin">the origin of the ray</param>
        public Ray(Vector3 direction, Vector3 origin)
        {
            Direction = direction;
            Origin = origin;
        }

        /// <summary>
        ///     Computes the point at a certain time on the ray
        /// </summary>
        /// <param name="t">the time</param>
        /// <returns>a new point on the ray</returns>
        public Vector3 PointAtTime(float t)
        {
            Vector3 point;
            PointAtTime(t, out point);
            return point;
        }

        /// <summary>
        ///     Computes the point at a certain time on the ray
        /// </summary>
        /// <param name="t">the time</param>
        /// <param name="point">the point</param>
        public void PointAtTime(float t, out Vector3 point)
        {
            point.X = Origin.X + Direction.X*t;
            point.Y = Origin.Y + Direction.Y*t;
            point.Z = Origin.Z + Direction.Z*t;
        }
    }
}